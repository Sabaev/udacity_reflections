What happens when you initialize a repository? Why do you need to do it?
-it create metafile for git in repository. For git work

How is the staging area different from the working directory and the repository? What value do you think it offers?
-Stating area contains files which can be commited. It offers ability to choice: which files we want to add to repository.

How can you use the staging area to make sure you have one commit per logical change?
if I changed two files and forgot what change was in first file:
- I run git diff (staging are working are)
- then I'l see different between staging and working(changes here) area
- after all, a add this file to staging are and commit.
- if I want discards any changes in iether the working directory or the staging area. run git --hard. WARNIG you can't revese it

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-When I make new feature, and I don't now, what I should to modify. I create new branch.
-Branches make it logicly separate, and my master branche independently develop

How do the diagrams help you visualize the branch structure?
-They show pass from branch HEAD to fathers, and show where (node)узлы

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-Their commits' history add together and are sorted by timestamp. Some information deleted(if in root was and in one of branches it deleted) and add if new code fragments.
-Graph show inheritens and we can unreacheble commits if they are.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
+It safe our time
+If some conflict it swich to manual merging
-I think possible many situation when apears some bugs: sam)foo(&x) bob)bar(&x)  
